<?php
// $Id$

/**
* Display help and module information
*/
function pclzip_zip_node_files_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#pclzip_zip_node_files":
      $output = '<p>'.  t("Sends a zip file to the user containing the node files.") .'</p>';
      break;
  }
  return $output;
}

/**
* Valid permissions for this module
*/
function pclzip_zip_node_files_perm() {
  return array('access pclzip_zip_node_files', 'administer pclzip_zip_node_files');
}

/**
* Implementation of hook_menu
*/
function pclzip_zip_node_files_menu() {
  $items = array();

  $items['node/%node/get_zip'] = array(
    'title'                       => 'Get files',
    'page callback'         => 'pclzip_zip_node_files_getzip',
    'page arguments'     => array(1),
    'access arguments'   => array('access pclzip_zip_node_files'),
    'type'                       => MENU_CALLBACK
  );

  $items['admin/settings/pclzip/zip_node_files'] = array(
    'title'                       => t('Zip nodes files'),
    'description'             => t('Settings for the pclzip_zip_node_files module.'),
    'page callback'          => 'drupal_get_form',
    'page arguments'      => array('pclzip_zip_node_files_settings'),
    'access arguments'    => array('administer site configuration'),
    'type'                         => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
* Admin settings
*/
function pclzip_zip_node_files_settings() {

  if (pclzip_library_exists()) {

    // build the admin form
    $form = array();

    $form['pclzip_zip_node_files']['content_type'] = array(
      '#type'           => 'fieldset',
      '#title'            => t('Content Type to show icon'),
      '#collapsible'  => TRUE,
      '#collapsed'    => TRUE,
    );

    // get the content types
    $options = array();
    $query = "SELECT type, name FROM {node_type}";
    $result = db_query($query);
    while ($field = db_fetch_object($result)) {
      $options[$field->type] = $field->name;
    }
    $form['pclzip_zip_node_files']['content_type']['pclzip_zip_node_files_content_type'] = array(
      '#type'                 => 'checkboxes',
      '#title'                  => t('Content Type for nodes'),
      '#options'             => $options,
      '#default_value'  => variable_get('pclzip_zip_node_files_content_type', array('page' =>'page')),
      '#description'       => t('Select the node type where you want the link to appear.'),
    );
    $form['pclzip_zip_node_files']['content_type']['pclzip_zip_node_files_content_type_teaser'] = array(
      '#type'                 => 'checkboxes',
      '#title'                  => t('Content Type for teaser'),
      '#options'             => $options,
      '#default_value'  => variable_get('pclzip_zip_node_files_content_type_teaser', array('page' =>'page')),
      '#description'       => t('Select the node type where you want the link to appear in teaser.'),
    );

    // filename
    $form['pclzip_zip_node_files']['filename'] = array(
      '#type'           => 'fieldset',
      '#title'            => t('Filename for the zip file'),
      '#collapsible'  => TRUE,
      '#collapsed'    => TRUE,
    );
    $form['pclzip_zip_node_files']['filename']['pclzip_zip_node_files_filename'] = array(
      '#type'                 => 'textfield',
      '#title'                  => t('Archive Filename'),
      '#maxlength'       => 255,
      '#default_value'  => variable_get('pclzip_zip_node_files_filename', 'archive'),
      '#description'       => t("Name of the archive file. Don't add the .zip extension."),
    );
    $form['pclzip_zip_node_files']['filename']['help'] = array(
      '#type' => 'item',
      '#description' => t('For the <b>Path to Zip</b> and <b>Archive Filename</b> you can add some vars inside :<br/><ul>'
                                    .'<li>%uid for user id</li>'
                                    .'<li>%name for user name</li>'
                                    .'<li>%nid for node id</li>'
                                    .'<li>%node_title for node title</li>'
                                    .'<li>%year for actual year</li>'
                                    .'<li>%month for actual month</li>'
                                    .'<li>%day for actual day</li></ul>'),
    );

    return system_settings_form($form);
  }
}

/**
* Implementation of hook_form_alter
*/
function pclzip_zip_node_files_form_alter(&$form, $form_state, $form_id) {
  if (pclzip_zip_node_files_is_type($form['type']['#value'], 'node') && isset($form['attachments'])) {
    if (pclzip_library_exists()) {
      // get download link infos
      $show_link = pclzip_zip_node_files_link_load($form['nid']['#value']);
      $form['attachments']['pclzip_zip_node_files'] = array(
        '#type'           =>'fieldset',
        '#title'            =>t('Download zip'),
        '#collapsible'  =>TRUE,
        '#collapsed'    =>TRUE,
      );
      $form['attachments']['pclzip_zip_node_files']['show_download_link'] = array(
        '#type'                   => 'checkbox',
        '#title'                    => t('Show download zip link'),
        '#default_value'    => $form['nid']['#value'] ? $show_link->show_download_link : 1,
        '#description'         => t('Select if you want to show the download zip file link for attachments.'),
      );
      if (pclzip_zip_node_files_is_type($form['type']['#value'], 'teaser')) {
        $form['attachments']['pclzip_zip_node_files']['show_download_link_teaser'] = array(
          '#type'                  => 'checkbox',
          '#title'                   => t('Show download zip link in teaser'),
          '#default_value'   => $form['nid']['#value'] ? $show_link->show_download_link_teaser : 1,
          '#description'        => t('Select if you want to show the download zip file link for attachments in teaser.'),
        );
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function pclzip_zip_node_files_nodeapi(&$node, $op, $teaser) {

  switch ($op) {

    case 'insert':
    case 'update':
      pclzip_zip_node_files_link_save($node->nid, $node->show_download_link, $node->show_download_link_teaser);
      break;

    case 'delete':
      pclzip_zip_node_files_link_delete($node->nid);
      break;

    case 'view':
      // get download link infos
      $show_link = pclzip_zip_node_files_link_load($node->nid);
      // display the link
      if (isset($node->files) && user_access('access pclzip_zip_node_files') && pclzip_zip_node_files_is_type($node->type, 'node')) {
        if (count($node->files) && $show_link->show_download_link) {
          if ($teaser && (!pclzip_zip_node_files_is_type($node->type, 'teaser') || !$show_link->show_download_link_teaser)) {
            return;
          }
          if (pclzip_library_exists()) {
            $node->content['pclzip_zip_node_files'] = array(
              '#value' => l(theme('pclzip_zip_node_files_download_link'), 'node/'. $node->nid. '/get_zip', array('html' =>TRUE)),
              '#weight' => 50,
            );
          }
        }
      }
      break;
  }
}

/**
* Load the download link value
*/
function pclzip_zip_node_files_link_load($nid) {
  return db_fetch_object(db_query('SELECT * FROM {pclzip_zip_node_files} WHERE nid=%d', $nid));
}

/**
* Save the download link value
*/
function pclzip_zip_node_files_link_save($nid, $show_download_link, $show_download_link_teaser) {
  $values = new stdclass;
  $values->nid = $nid;
  $values->show_download_link = $show_download_link;
  $values->show_download_link_teaser = $show_download_link_teaser;
  $show_link = pclzip_zip_node_files_link_load($nid);
  if ($show_link->nid) {
    // update entry
    drupal_write_record('pclzip_zip_node_files', $values, 'nid');
  }
  else {
    // insert new entry
    drupal_write_record('pclzip_zip_node_files', $values);
  }
}

/**
* DELETE the download link value
*/
function pclzip_zip_node_files_link_delete($nid) {
  db_query('DELETE FROM {pclzip_zip_node_files} WHERE nid=%d', $nid);
}

/**
 * Check if node type is selected
 */
function pclzip_zip_node_files_is_type($type, $place) {
  switch ($place) {
    case 'node':
      $types = variable_get('pclzip_zip_node_files_content_type', array('page' =>'page'));
      break;
    case 'teaser':
      $types = variable_get('pclzip_zip_node_files_content_type_teaser', array('page' =>'page'));
      break;
  }
  // rebuild content types
  $allowed_contents = array();
  foreach ($types as $value) {
    array_push($allowed_contents, $value);
  }
  return in_array($type, $allowed_contents, TRUE);
}

/**
 * Implementation of hook_theme().
 */
function pclzip_zip_node_files_theme() {
  return array(
    'pclzip_zip_node_files_download_link'  => array(
      'arguments'     => array(),
      'template'        =>'download_link',
    ),
  );
}

/**
* Helper function to replace the string with defined vars
*/
function pclzip_zip_node_files_str_replacevars($string, $node) {
  global $user;
  $replacers = array(
    // user
    '%uid' =>$user->uid,
    '%name' =>$user->name,
    // node
    '%nid' =>$node->nid,
    '%node_title' =>$node->title,
    // other
    '%year' =>date('Y'),
    '%month' =>date('m'),
    '%day' =>date('d'),
  );
  foreach ($replacers as $key=>$value) {
    $string = str_replace($key, $value, $string);
  }
  return $string;
}

/**
* Main function
*/
function pclzip_zip_node_files_getzip($node) {

  // return an error if no files
  if (empty($node->files)) {
    drupal_set_message(t('No files for this node'), 'error');
    drupal_goto('node/'. $node->nid);
    return;
  }

  // get the files paths from the node
  $files = array();
  foreach ($node->files as $file) {
    array_push($files, $file->filepath);
  }

  // get the filename
  $filename = pclzip_zip_node_files_str_replacevars(variable_get('pclzip_zip_node_files_filename', 'archive'), $node).".zip";

  // create the archive
  $archive =& module_invoke("pclzip", 'build_archive', $filename);
  $v_list = $archive->add($files, PCLZIP_OPT_REMOVE_ALL_PATH);

  if ($v_list == 0) {
    drupal_set_message($archive->errorInfo(true), 'error');
    drupal_goto('node/'. $node->nid);
    return;
  }

  // send the archive
  module_invoke("pclzip", 'send_file', $filename);
  drupal_goto('node/'. $node->nid);
}